# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import xml.etree.ElementTree as ET
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import (QFileDialog, QMessageBox, QApplication, QDialog, QPushButton, QTableWidget,
                             QTableWidgetItem, QAbstractItemView, QHeaderView, QMenu,
                             QActionGroup, QAction)
from Listas import ListaLineas,ListaProductos,ListaDatos,ListaSimulaciones
from nodos import Pieza
import copy
import webbrowser
import os
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.ListaLineas=ListaLineas()
        self.ListaProductos=ListaProductos()
        self.ListaProductosLinea=ListaProductos()
        self.ListaSimulaciones=ListaSimulaciones()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 575)
        MainWindow.setLayoutDirection(QtCore.Qt.RightToLeft)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.archivo = QtWidgets.QPushButton(self.centralwidget)
        self.archivo.setGeometry(QtCore.QRect(30, 50, 251, 41))
        self.archivo.clicked.connect(self.LeerLineas)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.archivo.setFont(font)
        self.archivo.setObjectName("archivo")
        self.tbTerreno = QtWidgets.QTableWidget(self.centralwidget)
        self.tbTerreno.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tbTerreno.setDragDropOverwriteMode(False)
        self.tbTerreno.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tbTerreno.setSelectionMode(QAbstractItemView.SingleSelection)
        self.tbTerreno.setSortingEnabled(False)
        self.tbTerreno.verticalHeader().setDefaultSectionSize(25)
        self.tbTerreno.setAlternatingRowColors(True)
        self.tbTerreno.horizontalHeader().setDefaultAlignment(Qt.AlignHCenter|Qt.AlignVCenter|Qt.AlignCenter)
        
        
        self.tbTerreno.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tbTerreno.setWordWrap(False)

        self.tbTerreno.setGeometry(QtCore.QRect(310, 50, 460, 301))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(10)
        self.tbTerreno.setFont(font)
        self.tbTerreno.setObjectName("tbTerreno")
        self.Reporte = QtWidgets.QPushButton(self.centralwidget)
        self.Reporte.clicked.connect(self.Reportar)
        self.Reporte.setGeometry(QtCore.QRect(160, 240, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Reporte.setFont(font)
        self.Reporte.setObjectName("Reporte")
        self.info = QtWidgets.QPushButton(self.centralwidget)
        self.info.setGeometry(QtCore.QRect(40, 390, 241, 41))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.info.setFont(font)
        self.info.setObjectName("info")
        self.info.clicked.connect(self.VerInfo)
        self.info.setEnabled(False)

        self.Exportar = QtWidgets.QPushButton(self.centralwidget)
        self.Exportar.setGeometry(QtCore.QRect(475, 360, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Exportar.setFont(font)
        self.Exportar.setObjectName("info")
        self.Exportar.clicked.connect(self.HTML)
        self.Exportar.setEnabled(False)



        self.imagen = QtWidgets.QPushButton(self.centralwidget)
        self.imagen.setGeometry(QtCore.QRect(40, 440, 241, 41))
        self.imagen.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.imagen.setFont(font)
        self.imagen.setObjectName("imagen")
        self.imagen.clicked.connect(self.Imagen)

        self.procesar = QtWidgets.QPushButton(self.centralwidget)
        self.procesar.setGeometry(QtCore.QRect(30, 240, 111, 41))
        self.procesar.clicked.connect(self.ProcesarSimulacion)
        self.procesar.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.procesar.setFont(font)
        self.procesar.setObjectName("procesar")
        self.cmbProducto = QtWidgets.QComboBox(self.centralwidget)
        self.cmbProducto.setGeometry(QtCore.QRect(30, 200, 251, 31))
        self.cmbProducto.activated.connect(self.InfoSimulacion)
        self.cmbProducto.setObjectName("cmbProducto")
        self.Tiempo = QtWidgets.QLabel(self.centralwidget)
        self.Tiempo.setGeometry(QtCore.QRect(150, 530, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Tiempo.setFont(font)
        self.Tiempo.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Tiempo.setTextFormat(QtCore.Qt.PlainText)
        self.Tiempo.setObjectName("Tiempo")
        
        self.labelIm = QtWidgets.QLabel(self.centralwidget)
        self.labelIm.setFont(font)
        self.labelIm.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.labelIm.setTextFormat(QtCore.Qt.PlainText)
        self.labelIm.setObjectName("Tiempo")
        self.labelIm.setStyleSheet("border: 1px solid black;") 
        self.labelIm.setGeometry(QtCore.QRect(310, 415, 460, 90))

        self.Tiempo_2 = QtWidgets.QLabel(self.centralwidget)
        self.Tiempo_2.setGeometry(QtCore.QRect(20, 160, 271, 31))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Tiempo_2.setFont(font)
        self.Tiempo_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Tiempo_2.setTextFormat(QtCore.Qt.PlainText)
        self.Tiempo_2.setObjectName("Tiempo_2")
        self.Tiempo_3 = QtWidgets.QLabel(self.centralwidget)
        self.Tiempo_3.setGeometry(QtCore.QRect(70, 500, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Tiempo_3.setFont(font)
        self.Tiempo_3.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Tiempo_3.setTextFormat(QtCore.Qt.PlainText)
        self.Tiempo_3.setObjectName("Tiempo_3")
        self.Tiempo_4 = QtWidgets.QLabel(self.centralwidget)
        self.Tiempo_4.setGeometry(QtCore.QRect(470, 10, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Tiempo_4.setFont(font)
        self.Tiempo_4.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Tiempo_4.setTextFormat(QtCore.Qt.PlainText)
        self.Tiempo_4.setObjectName("Tiempo_4")
        self.archivo_articulos = QtWidgets.QPushButton(self.centralwidget)
        self.archivo_articulos.setGeometry(QtCore.QRect(30, 100, 251, 41))
        self.archivo_articulos.clicked.connect(self.LeerSimulacion)
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.archivo_articulos.setFont(font)
        self.archivo_articulos.setObjectName("archivo_articulos")
        self.Tiempo_5 = QtWidgets.QLabel(self.centralwidget)
        self.Tiempo_5.setGeometry(QtCore.QRect(30, 300, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(11)
        self.Tiempo_5.setFont(font)
        self.Tiempo_5.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Tiempo_5.setTextFormat(QtCore.Qt.PlainText)
        self.Tiempo_5.setObjectName("Tiempo_5")
        self.cmbProd = QtWidgets.QComboBox(self.centralwidget)
        self.cmbProd.setFont(font)
        self.cmbProd.activated.connect(self.Activar)
        self.Reporte.setEnabled(False)
        self.cmbProducto.setFont(font)
        self.cmbProd.setGeometry(QtCore.QRect(30, 340, 251, 31))
        self.cmbProd.setObjectName("cmbProd")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.tbTerreno.verticalHeader().setVisible(False)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Digital Intelligence"))
        self.archivo.setText(_translate("MainWindow", "ARCHIVO DE LINEAS"))
        self.Reporte.setText(_translate("MainWindow", "REPORTE"))
        self.info.setText(_translate("MainWindow", "VER INFORMACION"))
        self.imagen.setText(_translate("MainWindow", "GENERAR IMAGEN"))
        self.procesar.setText(_translate("MainWindow", "PROCESAR"))
        self.Exportar.setText(_translate("MainWindow", "EXPORTAR"))
        self.Tiempo.setText(_translate("MainWindow", "0"))
        self.labelIm.setText(_translate("MainWindow", ""))
        self.Tiempo_2.setText(_translate("MainWindow", "seleccionar simulacion"))
        self.Tiempo_3.setText(_translate("MainWindow", "tiempo empleado:"))
        self.Tiempo_4.setText(_translate("MainWindow", "DESCRIPCION"))
        self.archivo_articulos.setText(_translate("MainWindow", "ARCHIVO DE ARTICULOS"))
        self.Tiempo_5.setText(_translate("MainWindow", "seleccionar producto"))

    def Activar(self):
        nombreProd=self.cmbProd.currentText()
        self.Exportar.setEnabled(False)
        nombreSim=self.cmbProducto.currentText()
        aux=self.ListaSimulaciones.Obtener(nombreProd,nombreSim)
        if aux.Procesado==True:
            self.info.setEnabled(True)
            self.imagen.setEnabled(True)
        else:
            self.info.setEnabled(False)
            self.imagen.setEnabled(False)

    def LeerLineas(self):
        buscar = QFileDialog.getOpenFileName()
        mytree = ET.parse(buscar[0])
        myroot = mytree.getroot()
        NLineas=myroot[0].text
        for x in range (int(NLineas)):
            Id=myroot[1][x][0].text
            numeroCom=myroot[1][x][1].text
            TiempoEnsamblaje=myroot[1][x][2].text
            self.ListaLineas.Añadir(Id,numeroCom,TiempoEnsamblaje)
        for x in myroot[2].findall('Producto'):
            Nombre=x[0].text
            Productos=x[1].text
            self.ListaProductos.Añadir(Nombre,Productos)
            c=""
            con=0
            for x in range(len(Productos)):
                if Productos[x]==" ":
                    continue
                c+=Productos[x]
                if len(c)==4:
                    self.ListaProductos.AñadirPiezas(Nombre,c[1],con,c,c[3])
                    c=""
                    con+=1
                
        self.ListaLineas.MostrarDatos()
        self.ListaProductos.MostrarDatos()
        self.Columnas()
            
    
    def HTML(self):
        
        nombreSim=self.cmbProducto.currentText()
        nombreProd=self.cmbProd.currentText()
        file=open(nombreProd+'.html','w')
        aux=self.ListaSimulaciones.Obtener(nombreProd,nombreSim)
        contenido="""<!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>REPORTE</title>
    </head>
    <body><center><h1>FABRICACION DE """+aux.producto.nombre+"""</h1>
    <h2>TIEMPO TOTAL: """+str(aux.TiempoRealizado)+"""</h2>
    <center>"""
        contenido+="""<div class="container-table">
        <div class="table__title">
            PROCEDIMIENTO
        </div>
        """
        contenido+='<div class="table__header">Segundo</div>'
        l=1
        while l<=self.ListaLineas.size:
            contenido+='<div class="table__header">LINEA '+str(l)+'</div>'
            l+=1
        
        a=aux.NodoAccion
        if 1==1:        
            fila=0
            columna=0
            longi=(int(self.ListaLineas.size)+1)*int(aux.TiempoRealizado)
            while longi>0:
                a=aux.NodoAccion
                while a:
                    if columna==0:
                        contenido+='<div class="table__item">'+str(fila+1)+'</div>'
                        columna+=1
                        break
                    if (fila+1)==int(a.Tiempo) and (columna)==int(a.Linea):
                        contenido+='<div class="table__item">'+a.Descripcion+'</div>'
                        columna+=1
                        if columna>self.ListaLineas.size:
                            fila+=1
                            columna=0
                        break
                    a=a.Next
                longi-=1
        contenido+="</div>"
        contenido+="""</body>
        </html>"""
        try:
            file.write(contenido)
        except:
            print("Ocurrio un error")
        finally:
            file.close()
            webbrowser.open_new_tab(nombreProd+'.html')

    def Columnas(self):
        nombreColumnas = []
        c=0
        
        a=self.ListaLineas.Last
        while a:
            nombreColumnas.append("Linea "+str(a.Id))
            a=a.Anterior
            c=1
        
        nombreColumnas.append("Tiempo")
        self.tbTerreno.setColumnCount(len(nombreColumnas))
        self.tbTerreno.setColumnWidth(len(nombreColumnas),20)
        ancho=440//(len(nombreColumnas)-1)-30
        for x in range(0,len(nombreColumnas)-1):
            self.tbTerreno.setColumnWidth(x,ancho)
        self.tbTerreno.setHorizontalHeaderLabels(nombreColumnas)

    def VerInfo(self):
        nombreSim=self.cmbProducto.currentText()
        nombreProd=self.cmbProd.currentText()
        self.Exportar.setEnabled(True)
        aux=self.ListaSimulaciones.Obtener(nombreProd,nombreSim)
        if aux!=None:
            if aux.Procesado==True:

                self.Tiempo.setText(str(aux.TiempoRealizado)+" s")
                pruebax=self.tbTerreno.rowCount()
                while pruebax>=0:
                    self.tbTerreno.removeRow(pruebax)
                    pruebax-=1
                self.Columnas()
                
                a=aux.NodoAccion
                
                fila=0
                columna=0
                c=(int(self.ListaLineas.size))
                longi=(int(self.ListaLineas.size)+1)*int(aux.TiempoRealizado)
                while longi>0:
                    a=aux.NodoAccion
                    
                    while a:
                        if columna==0:
                                self.tbTerreno.insertRow(fila)
                                celda=QTableWidgetItem(str(fila+1)+"s")
                                self.tbTerreno.setItem(fila,c,celda)
                                columna+=1
                                c-=1
                                break
                        if (fila+1)==int(a.Tiempo) and (columna)==int(a.Linea):
                            celda=QTableWidgetItem(a.Descripcion)
                            self.tbTerreno.setItem(fila,c,celda)
                            
                            columna+=1
                            c-=1
                            if columna>self.ListaLineas.size:
                                fila+=1
                                columna=0
                                c=(int(self.ListaLineas.size))
                            break
                        a=a.Next
                    longi-=1
                if aux.producto.Imagen:
                    pixmap = QPixmap(aux.nombre+"_"+aux.producto.nombre+'.png')
                    self.labelIm.setPixmap(pixmap)   
            else:
                msg=QMessageBox()
                msg.setWindowTitle("OCURRIO UN ERROR")
                msg.setText("Producto sin procesar")
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_()
        else:
            msg=QMessageBox()
            msg.setWindowTitle("OCURRIO UN ERROR")
            msg.setText("Producto sin procesar")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()



    def LeerSimulacion(self):
        buscar = QFileDialog.getOpenFileName()
        mytree = ET.parse(buscar[0])
        myroot = mytree.getroot()
        nombreSimulacion=myroot[0].text
        self.cmbProducto.addItem(nombreSimulacion)
        self.procesar.setEnabled(True)
        for x in myroot[1].findall('Producto'):
            nombreP=x.text
            aux=self.ListaProductos.obtener(nombreP)
            if aux.nombre==nombreP:
                self.ListaSimulaciones.Añadir(nombreSimulacion,aux)
            else:
                msg=QMessageBox()
                msg.setWindowTitle("OCURRIO UN ERROR")
                msg.setText(nombreP+" no existe en los registros")
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_()
                
    def ProcesarSimulacion(self):
        
        nombre=self.cmbProducto.currentText()
        #aux=self.ListaProductos.obtener()
        self.ListaSimulaciones.Procesar(nombre,self.ListaLineas.size,self.ListaLineas)
        self.Reporte.setEnabled(True)
        self.ListaSimulaciones.Mostrar()
        self.cmbProd.clear()
        nombre=self.cmbProducto.currentText()
        a=self.ListaSimulaciones.First
        while a:
            if nombre==a.nombre:
                self.cmbProd.addItem(a.producto.nombre)
            a=a.Next
        
        aux=self.ListaProductos.First
        while aux:
            a=aux.NodoPieza
            while a:
                a.Armado=False
                a=a.Next
            aux=aux.Next
        
    def InfoSimulacion(self):
        self.cmbProd.clear()
        nombre=self.cmbProducto.currentText()
        a=self.ListaSimulaciones.First
        while a:
            if nombre==a.nombre:
                self.cmbProd.addItem(a.producto.nombre)
            a=a.Next
    
    def Reportar(self):
        nombre=self.cmbProducto.currentText()
        self.ListaSimulaciones.imprimirXML(nombre)

    def Imagen(self):
        nombreSim=self.cmbProducto.currentText()
        nombreProd=self.cmbProd.currentText()
        aux=self.ListaSimulaciones.Obtener(nombreProd,nombreSim)
        if aux!=None:
            if aux.Procesado==True:
                archivo=open(aux.nombre+"_"+aux.producto.nombre+".dot","w")
                archivo.write("digraph "+aux.nombre+"_"+aux.producto.nombre+"{\n")
                a=aux.producto.NodoPieza
                while a:
                    archivo.write(str(a.Id)+"[label="+str(a.nombre)+"]\n")
                    a=a.Next
                a=aux.producto.NodoPieza
                while a.Next:
                    archivo.write("rankdir=LR{"+str(a.Id)+"->"+str(a.Next.Id)+"}\n")
                    a=a.Next
                archivo.write("label="+aux.producto.nombre+"\n")
                archivo.write("}")
                
                archivo.close()
                #os.environ["PATH"] += os.pathsep + 'C:/Program Files/Graphviz/bin'
                os.system('dot -Tpng '+aux.nombre+"_"+aux.producto.nombre+'.dot -o '+aux.nombre+"_"+aux.producto.nombre+'.png')
                print("Grafico generado :)")
                aux.producto.Imagen=True

            else:
                msg=QMessageBox()
                msg.setWindowTitle("OCURRIO UN ERROR")
                msg.setText("Producto sin procesar")
                msg.setIcon(QMessageBox.Warning)
                x=msg.exec_()
        else:
            msg=QMessageBox()
            msg.setWindowTitle("OCURRIO UN ERROR")
            msg.setText("Producto sin procesar")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
        
        print("imagen")
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
